import { LoyaltyClient } from "../lib/esm/loyalty.js";
import dotenv from "dotenv";
dotenv.config();
import yaml from "yaml";
import fs from "fs";

export let APPLICATION_PROXY_URL = "https://your-proxy.url/proxy";
export let APPLICATION_CONFIG = {};
export let GOOGLE_APPLICATION_CREDENTIALS = {};

export let GOOGLE_APPLICATION_LOYALTY = new LoyaltyClient({});
export let GOOGLE_APPLICATION_ISSUER_ID = process.env.ISSUER_ID;

export function ConfigInit() {
	try {
		GOOGLE_APPLICATION_CREDENTIALS = JSON.parse(process.env.GOOGLE_APPLICATION_CREDENTIALS);
		GOOGLE_APPLICATION_LOYALTY = new LoyaltyClient(GOOGLE_APPLICATION_CREDENTIALS);
		console.log(`üíª Google Cloud Console –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env`);
	} catch (error) {
		ErrorHandler(error, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ : .env");
		process.exit(1);
	}
	try {
		const configFile = fs.readFileSync("./server/config.yaml", "utf8");
		APPLICATION_CONFIG = yaml.parse(configFile);
		console.log(`üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è mosmetro.ru –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config.yaml`);
	} catch (error) {
		ErrorHandler(error, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ : config.yaml");
		process.exit(1);
	}
}

export function ConfigSave() {
	try {
		const yamlStr = yaml.stringify(APPLICATION_CONFIG);
		fs.writeFileSync("./server/config.yaml", yamlStr, "utf8");
		return true;
	} catch (error) {
		return ErrorHandler(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
	}
}

// export function ConfigUpdate(section, key, value) {
// 	try {
// 		if (!key) {
// 			console.error("–ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
// 			return false;
// 		}

// 		APPLICATION_CONFIG[section] = APPLICATION_CONFIG[section] || {};
// 		APPLICATION_CONFIG[section][key] = value;

// 		const success = ConfigSave();

// 		if (success) {
// 			console.log(`‚úÖ –ö–ª—é—á "${key}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª "${section}".`);
// 		}
// 		return success;
// 	} catch (error) {
// 		return ErrorHandler(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
// 	}
// }

export function ConfigAdd(section, key, value) {
	try {
		if (!key) {
			console.error("–ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
			return false;
		}

		APPLICATION_CONFIG[section] = APPLICATION_CONFIG[section] || {};

		if (APPLICATION_CONFIG[section].hasOwnProperty(key)) {
			console.warn(`‚ö†Ô∏è –ö–ª—é—á "${key}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ "${section}".`);
			return false;
		}

		APPLICATION_CONFIG[section][key] = value;

		const success = ConfigSave();

		if (success) {
			console.log(`‚úÖ –ö–ª—é—á "${key}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª "${section}".`);
		}

		return success;
	} catch (error) {
		return ErrorHandler(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
	}
}

export function ConfigUpdate(section, key, value) {
	try {
		if (!key) {
			console.error("–ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
			return false;
		}

		APPLICATION_CONFIG[section] = APPLICATION_CONFIG[section] || {};

		const isUpdate = APPLICATION_CONFIG[section].hasOwnProperty(key);

		if (!isUpdate) {
			APPLICATION_CONFIG[section][key] = {};
		}
		
		const newData = {
			...APPLICATION_CONFIG[section][key],
			...value
		};

		APPLICATION_CONFIG[section][key] = newData;

		const success = ConfigSave();

		if (success) {
			if (isUpdate) {
				console.warn(`‚úíÔ∏è –ö–ª—é—á "${key}" –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "${section}".`);
			} else {
				console.log(`‚úÖ –ö–ª—é—á "${key}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª "${section}".`);
			}
		}

		return success;
	} catch (error) {
		return ErrorHandler(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
	}
}

export function ConfigFind(section, key) {
	try {
		if (!section || !key) {
			console.error("–°–µ–∫—Ü–∏—è –∏ –∫–ª—é—á –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏");
			return null;
		}

		if (!APPLICATION_CONFIG[section]) {
			return null;
		}

		return APPLICATION_CONFIG[section][key] || null;
	} catch (error) {
		ErrorHandler(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
		return null;
	}
}

export function ConfigQuery(section) {
	try {
		if (!section) {
			console.error("–°–µ–∫—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
			return null;
		}

		const sectionData = APPLICATION_CONFIG[section];

		if (!sectionData) {
			return null;
		}

		let lastResult = null;

		return {
			data: sectionData,

			where(path, value) {
				const result = {};

				for (const [key, entry] of Object.entries(sectionData)) {
					const nestedValue = path.split('.').reduce((acc, part) => acc?.[part], entry);
					if (nestedValue === value) {
						result[key] = entry;
					}
				}

				lastResult = result;
				return this; // –¥–ª—è —á–µ–π–Ω–∏–Ω–≥–∞
			},

			first() {
				if (!lastResult || Object.keys(lastResult).length === 0) {
					return null;
				}

				const firstKey = Object.keys(lastResult)[0];
				return {
					key: firstKey,
					data: lastResult[firstKey]
				};
			}
		};
	} catch (error) {
		ErrorHandler(error, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
		return null;
	}
}

export function ErrorHandler(error, info) {
	console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
	if (info) {
		console.error("‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:");
		console.error("   –°–æ–æ–±—â–µ–Ω–∏–µ:", info);
	}
	console.error("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:");
	console.error("   –û–±—å–µ–∫—Ç:", error);

	return false;
}

// Deprecation
export function saveConfig() {
	ConfigSave()
}
// Deprecation
export function loadConfig() {
	ConfigInit()
}